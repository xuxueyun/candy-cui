// Code generated by protoc-gen-gogo.
// source: notifer.proto
// DO NOT EDIT!

package meta

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

// skipping weak import gogoproto "gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type RegionSetRequest struct {
	Begin int32 `protobuf:"varint,1,opt,name=Begin,json=begin,proto3" json:"Begin,omitempty"`
	End   int32 `protobuf:"varint,2,opt,name=End,json=end,proto3" json:"End,omitempty"`
}

func (m *RegionSetRequest) Reset()                    { *m = RegionSetRequest{} }
func (m *RegionSetRequest) String() string            { return proto.CompactTextString(m) }
func (*RegionSetRequest) ProtoMessage()               {}
func (*RegionSetRequest) Descriptor() ([]byte, []int) { return fileDescriptorNotifer, []int{0} }

type RegionSetResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *RegionSetResponse) Reset()                    { *m = RegionSetResponse{} }
func (m *RegionSetResponse) String() string            { return proto.CompactTextString(m) }
func (*RegionSetResponse) ProtoMessage()               {}
func (*RegionSetResponse) Descriptor() ([]byte, []int) { return fileDescriptorNotifer, []int{1} }

func (m *RegionSetResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// SubscribeRequest 订阅消息, Device使用的设备，Host从哪台gate上来
type SubscribeRequest struct {
	ID     int64  `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Device string `protobuf:"bytes,2,opt,name=Device,json=device,proto3" json:"Device,omitempty"`
	Host   string `protobuf:"bytes,3,opt,name=Host,json=host,proto3" json:"Host,omitempty"`
	Token  int64  `protobuf:"varint,4,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
}

func (m *SubscribeRequest) Reset()                    { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()               {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorNotifer, []int{2} }

// SubscribeResponse 可能返回节点错误或其它错误信息
type SubscribeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *SubscribeResponse) Reset()                    { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()               {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptorNotifer, []int{3} }

func (m *SubscribeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

// UnSubscribeRequest 取消订阅
type UnSubscribeRequest struct {
	ID     int64  `protobuf:"varint,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Device string `protobuf:"bytes,2,opt,name=Device,json=device,proto3" json:"Device,omitempty"`
	Host   string `protobuf:"bytes,3,opt,name=Host,json=host,proto3" json:"Host,omitempty"`
	Token  int64  `protobuf:"varint,4,opt,name=Token,json=token,proto3" json:"Token,omitempty"`
}

func (m *UnSubscribeRequest) Reset()                    { *m = UnSubscribeRequest{} }
func (m *UnSubscribeRequest) String() string            { return proto.CompactTextString(m) }
func (*UnSubscribeRequest) ProtoMessage()               {}
func (*UnSubscribeRequest) Descriptor() ([]byte, []int) { return fileDescriptorNotifer, []int{4} }

// UnSubscribeResponse 可能返回节点错误或其它错误信息
type UnSubscribeResponse struct {
	Header *ResponseHeader `protobuf:"bytes,1,opt,name=header" json:"header,omitempty"`
}

func (m *UnSubscribeResponse) Reset()                    { *m = UnSubscribeResponse{} }
func (m *UnSubscribeResponse) String() string            { return proto.CompactTextString(m) }
func (*UnSubscribeResponse) ProtoMessage()               {}
func (*UnSubscribeResponse) Descriptor() ([]byte, []int) { return fileDescriptorNotifer, []int{5} }

func (m *UnSubscribeResponse) GetHeader() *ResponseHeader {
	if m != nil {
		return m.Header
	}
	return nil
}

func init() {
	proto.RegisterType((*RegionSetRequest)(nil), "candy.meta.RegionSetRequest")
	proto.RegisterType((*RegionSetResponse)(nil), "candy.meta.RegionSetResponse")
	proto.RegisterType((*SubscribeRequest)(nil), "candy.meta.SubscribeRequest")
	proto.RegisterType((*SubscribeResponse)(nil), "candy.meta.SubscribeResponse")
	proto.RegisterType((*UnSubscribeRequest)(nil), "candy.meta.UnSubscribeRequest")
	proto.RegisterType((*UnSubscribeResponse)(nil), "candy.meta.UnSubscribeResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Notifer service

type NotiferClient interface {
	// Subscribe 用户上线，接受在线推送
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	// UnSubscribe 用户下线，取消在线推送
	UnSubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...grpc.CallOption) (*UnSubscribeResponse, error)
	// RegionSet 修改当前region的范围
	RegionSet(ctx context.Context, in *RegionSetRequest, opts ...grpc.CallOption) (*RegionSetResponse, error)
	// Push store调用的接口.
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error)
}

type notiferClient struct {
	cc *grpc.ClientConn
}

func NewNotiferClient(cc *grpc.ClientConn) NotiferClient {
	return &notiferClient{cc}
}

func (c *notiferClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Notifer/Subscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiferClient) UnSubscribe(ctx context.Context, in *UnSubscribeRequest, opts ...grpc.CallOption) (*UnSubscribeResponse, error) {
	out := new(UnSubscribeResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Notifer/UnSubscribe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiferClient) RegionSet(ctx context.Context, in *RegionSetRequest, opts ...grpc.CallOption) (*RegionSetResponse, error) {
	out := new(RegionSetResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Notifer/RegionSet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notiferClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushResponse, error) {
	out := new(PushResponse)
	err := grpc.Invoke(ctx, "/candy.meta.Notifer/Push", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Notifer service

type NotiferServer interface {
	// Subscribe 用户上线，接受在线推送
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	// UnSubscribe 用户下线，取消在线推送
	UnSubscribe(context.Context, *UnSubscribeRequest) (*UnSubscribeResponse, error)
	// RegionSet 修改当前region的范围
	RegionSet(context.Context, *RegionSetRequest) (*RegionSetResponse, error)
	// Push store调用的接口.
	Push(context.Context, *PushRequest) (*PushResponse, error)
}

func RegisterNotiferServer(s *grpc.Server, srv NotiferServer) {
	s.RegisterService(&_Notifer_serviceDesc, srv)
}

func _Notifer_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiferServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Notifer/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiferServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifer_UnSubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiferServer).UnSubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Notifer/UnSubscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiferServer).UnSubscribe(ctx, req.(*UnSubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifer_RegionSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegionSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiferServer).RegionSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Notifer/RegionSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiferServer).RegionSet(ctx, req.(*RegionSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Notifer_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotiferServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/candy.meta.Notifer/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotiferServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Notifer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "candy.meta.Notifer",
	HandlerType: (*NotiferServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Subscribe",
			Handler:    _Notifer_Subscribe_Handler,
		},
		{
			MethodName: "UnSubscribe",
			Handler:    _Notifer_UnSubscribe_Handler,
		},
		{
			MethodName: "RegionSet",
			Handler:    _Notifer_RegionSet_Handler,
		},
		{
			MethodName: "Push",
			Handler:    _Notifer_Push_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptorNotifer,
}

func (m *RegionSetRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RegionSetRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Begin != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintNotifer(data, i, uint64(m.Begin))
	}
	if m.End != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintNotifer(data, i, uint64(m.End))
	}
	return i, nil
}

func (m *RegionSetResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *RegionSetResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintNotifer(data, i, uint64(m.Header.Size()))
		n1, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	return i, nil
}

func (m *SubscribeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscribeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintNotifer(data, i, uint64(m.ID))
	}
	if len(m.Device) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintNotifer(data, i, uint64(len(m.Device)))
		i += copy(data[i:], m.Device)
	}
	if len(m.Host) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintNotifer(data, i, uint64(len(m.Host)))
		i += copy(data[i:], m.Host)
	}
	if m.Token != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintNotifer(data, i, uint64(m.Token))
	}
	return i, nil
}

func (m *SubscribeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *SubscribeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintNotifer(data, i, uint64(m.Header.Size()))
		n2, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	return i, nil
}

func (m *UnSubscribeRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnSubscribeRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintNotifer(data, i, uint64(m.ID))
	}
	if len(m.Device) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintNotifer(data, i, uint64(len(m.Device)))
		i += copy(data[i:], m.Device)
	}
	if len(m.Host) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintNotifer(data, i, uint64(len(m.Host)))
		i += copy(data[i:], m.Host)
	}
	if m.Token != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintNotifer(data, i, uint64(m.Token))
	}
	return i, nil
}

func (m *UnSubscribeResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UnSubscribeResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Header != nil {
		data[i] = 0xa
		i++
		i = encodeVarintNotifer(data, i, uint64(m.Header.Size()))
		n3, err := m.Header.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeFixed64Notifer(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Notifer(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintNotifer(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *RegionSetRequest) Size() (n int) {
	var l int
	_ = l
	if m.Begin != 0 {
		n += 1 + sovNotifer(uint64(m.Begin))
	}
	if m.End != 0 {
		n += 1 + sovNotifer(uint64(m.End))
	}
	return n
}

func (m *RegionSetResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovNotifer(uint64(l))
	}
	return n
}

func (m *SubscribeRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovNotifer(uint64(m.ID))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovNotifer(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovNotifer(uint64(l))
	}
	if m.Token != 0 {
		n += 1 + sovNotifer(uint64(m.Token))
	}
	return n
}

func (m *SubscribeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovNotifer(uint64(l))
	}
	return n
}

func (m *UnSubscribeRequest) Size() (n int) {
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovNotifer(uint64(m.ID))
	}
	l = len(m.Device)
	if l > 0 {
		n += 1 + l + sovNotifer(uint64(l))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovNotifer(uint64(l))
	}
	if m.Token != 0 {
		n += 1 + sovNotifer(uint64(m.Token))
	}
	return n
}

func (m *UnSubscribeResponse) Size() (n int) {
	var l int
	_ = l
	if m.Header != nil {
		l = m.Header.Size()
		n += 1 + l + sovNotifer(uint64(l))
	}
	return n
}

func sovNotifer(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozNotifer(x uint64) (n int) {
	return sovNotifer(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RegionSetRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionSetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionSetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begin", wireType)
			}
			m.Begin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Begin |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.End |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotifer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegionSetResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegionSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegionSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotifer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotifer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotifer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotifer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Token |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotifer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SubscribeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotifer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotifer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnSubscribeRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnSubscribeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnSubscribeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Device", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotifer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Device = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNotifer
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			m.Token = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Token |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipNotifer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnSubscribeResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNotifer
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnSubscribeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnSubscribeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNotifer
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Header == nil {
				m.Header = &ResponseHeader{}
			}
			if err := m.Header.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNotifer(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthNotifer
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNotifer(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNotifer
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNotifer
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthNotifer
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowNotifer
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipNotifer(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthNotifer = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNotifer   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("notifer.proto", fileDescriptorNotifer) }

var fileDescriptorNotifer = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xbc, 0x93, 0xcf, 0x4e, 0xc2, 0x40,
	0x10, 0xc6, 0xe9, 0x5f, 0xc3, 0xa0, 0x06, 0x57, 0x82, 0x4d, 0xa3, 0xd5, 0x70, 0xf2, 0x54, 0x13,
	0x3c, 0xe9, 0x91, 0x60, 0x2c, 0x17, 0x62, 0x8a, 0x26, 0xc6, 0x1b, 0x6d, 0x87, 0xd2, 0x18, 0x76,
	0xb1, 0x5d, 0x4c, 0x7c, 0x0b, 0x1f, 0xc3, 0x47, 0xf1, 0xe8, 0x23, 0x18, 0x7c, 0x11, 0xd3, 0x2d,
	0xe0, 0x02, 0xe1, 0xa2, 0x89, 0xb7, 0xce, 0xcc, 0xf7, 0xcd, 0xfe, 0xb6, 0xf9, 0x16, 0x76, 0x28,
	0xe3, 0xc9, 0x00, 0x53, 0x77, 0x9c, 0x32, 0xce, 0x08, 0x84, 0x7d, 0x1a, 0xbd, 0xb8, 0x23, 0xe4,
	0x7d, 0xbb, 0x16, 0xb3, 0x98, 0x89, 0xf6, 0x59, 0xfe, 0x55, 0x28, 0xec, 0xed, 0x90, 0x8d, 0x46,
	0x8c, 0x16, 0x55, 0xe3, 0x12, 0xaa, 0x3e, 0xc6, 0x09, 0xa3, 0x3d, 0xe4, 0x3e, 0x3e, 0x4d, 0x30,
	0xe3, 0xa4, 0x06, 0x46, 0x0b, 0xe3, 0x84, 0x5a, 0xca, 0x89, 0x72, 0x6a, 0xf8, 0x46, 0x90, 0x17,
	0xa4, 0x0a, 0xda, 0x15, 0x8d, 0x2c, 0x55, 0xf4, 0x34, 0xa4, 0x51, 0xe3, 0x1a, 0xf6, 0x24, 0x6f,
	0x36, 0x66, 0x34, 0x43, 0xd2, 0x04, 0x73, 0x88, 0xfd, 0x08, 0x53, 0xe1, 0xae, 0x34, 0x6d, 0xf7,
	0x87, 0xc8, 0x9d, 0xab, 0x3c, 0xa1, 0xf0, 0x67, 0xca, 0x46, 0x04, 0xd5, 0xde, 0x24, 0xc8, 0xc2,
	0x34, 0x09, 0x70, 0x0e, 0xb1, 0x0b, 0x6a, 0xa7, 0x2d, 0x76, 0x68, 0xbe, 0x9a, 0xb4, 0x49, 0x1d,
	0xcc, 0x36, 0x3e, 0x27, 0x21, 0x0a, 0x82, 0xb2, 0x6f, 0x46, 0xa2, 0x22, 0x04, 0x74, 0x8f, 0x65,
	0xdc, 0xd2, 0x44, 0x57, 0x1f, 0xb2, 0xe2, 0x02, 0xb7, 0xec, 0x11, 0xa9, 0xa5, 0x0b, 0xbb, 0xc1,
	0xf3, 0x22, 0xc7, 0x95, 0x4e, 0xf9, 0x03, 0xee, 0x00, 0xc8, 0x1d, 0xfd, 0x07, 0xe0, 0x0e, 0xec,
	0x2f, 0x9d, 0xf3, 0x7b, 0xe4, 0xe6, 0x9b, 0x0a, 0x5b, 0xdd, 0x22, 0x28, 0xc4, 0x83, 0xf2, 0x62,
	0x29, 0x39, 0x94, 0xcd, 0xab, 0x77, 0xb2, 0x8f, 0x36, 0x4c, 0x67, 0x24, 0x5d, 0xa8, 0x48, 0x80,
	0xc4, 0x91, 0xd5, 0xeb, 0x7f, 0xc8, 0x3e, 0xde, 0x38, 0x9f, 0xed, 0xf3, 0xa0, 0xbc, 0x08, 0xd4,
	0x32, 0xd9, 0x6a, 0x46, 0x97, 0xc9, 0xd6, 0x53, 0x78, 0x01, 0xfa, 0xcd, 0x24, 0x1b, 0x92, 0x03,
	0x59, 0x96, 0x77, 0xe6, 0x7e, 0x6b, 0x7d, 0x50, 0x58, 0x5b, 0xf5, 0xf7, 0xa9, 0xa3, 0x7c, 0x4c,
	0x1d, 0xe5, 0x73, 0xea, 0x28, 0xaf, 0x5f, 0x4e, 0xe9, 0x41, 0xcf, 0x45, 0xf7, 0xa5, 0xc0, 0x14,
	0x4f, 0xe6, 0xfc, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x06, 0xb8, 0x19, 0x73, 0x03, 0x00, 0x00,
}
